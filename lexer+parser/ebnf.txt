<stmt> ::=   if <bExpr> then <bExpr> else <bExpr> fi
           | let <ID> := <bExpr> in <bExpr> end 
           | <bExpr>

<bExpr> ::=   <bTerm> IMPLIES <bExpr>
            | <bTerm>

<bTerm> ::= <bNt> <bTerm'>

<bTerm'> ::=   AND <bNt> <bTerm'> 
             | OR <bNt> <bTerm'>
	     | XOR <bNt> <bTerm'>
             | == <bNt> <bTerm'>
             | 系

<bNt> ::=  NOT <bNt>
         | <expr>

<expr> ::= <factor> <expr'>

<expr'> ::=  > <factor> <expr'>
           | < <factor> <expr'>
           | 系

<factor> ::= <term> <factor'>

<factor'> ::=   + <term> <factor'>
              | - <term> <factor'>
              | 系

<term> ::= <iden> <term'>

<term'> ::=  * <iden> <term'>
           | 系

<iden> ::=  ~ <iden>
           |<simple>

<simple> ::= CONST | ID | NUM | ( <stmt> )

           